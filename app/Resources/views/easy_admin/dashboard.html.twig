{% extends "easy_admin/layout.html.twig" %}

{% block content_title %}
    Dashboard <small>Paneau de contrôle</small>
{% endblock %}

{% block flash_messages %}
    {{ include('easy_admin/flash_messages.html.twig') }}
{% endblock flash_messages %}

{% block main %}

    <div class="row">
        <div class="col-md-6">
            <div class="bg-red">
                <canvas id='c' style="width: 100%; height:auto"></canvas>
            </div>
        </div>
        <div class="col-md-6">
                <button id="drawing-mode" class="btn btn-info">Cancel drawing mode</button><br>
                <button id="clear-canvas" class="btn btn-info">Clear</button><br>

                <div id="drawing-mode-options">
                    <label for="drawing-mode-selector">Mode:</label>
                    <select id="drawing-mode-selector">
                        <option>Pencil</option>
                        <option>Circle</option>
                        <option>Spray</option>
                        <option>Pattern</option>

                        <option>hline</option>
                        <option>vline</option>
                        <option>square</option>
                        <option>diamond</option>
                        <option>texture</option>
                    </select><br>

                    <label for="drawing-line-width">Line width:</label>
                    <span class="info">30</span><input type="range" value="30" min="0" max="150" id="drawing-line-width"><br>

                    <label for="drawing-color">Line color:</label>
                    <input type="color" value="#005E7A" id="drawing-color"><br>

                    <label for="drawing-shadow-color">Shadow color:</label>
                    <input type="color" value="#005E7A" id="drawing-shadow-color"><br>

                    <label for="drawing-shadow-width">Shadow width:</label>
                    <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>

                    <label for="drawing-shadow-offset">Shadow offset:</label>
                    <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-offset"><br>
                </div>
        </div>
    </div>

    <div class="row">

        <div class="col-md-12">
            <div class="box">
                <div class="box-header">

                    <h3 class="box-title">
                        Notification automatique de disponibilitée
                    </h3>
                    <p class="help-block">
                        Envoi de courriel pour aviser les clients d'une nouvelle disponibilité
                        {% if availabilityNotifications|length %}
                            <span class="label label-success">Envoi en cours</span>
                        {% else %}
                            <span class="label label-info">Aucun envoi en cours</span>
                        {% endif %}
                    </p>

                </div>
                <!-- /.box-header -->
                {% if availabilityNotifications|length %}
                    <div class="box-body no-padding">
                        <table class="table table-hover">
                            <tbody><tr>
                                <th></th>
                                <th>Notifications envoyée</th>
                                <th>Disponibilité</th>
                                <th>Dernière notification</th>
                            </tr>
                            {% for notification in availabilityNotifications  %}
                                <tr>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-info dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                Action
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu pull-left" aria-labelledby="dropdownMenu2">
                                                <li><a href="{{ path('admin_appointment_notification_answer', { 'id': notification.command_id }) }}">Abandonner l'envoi</a></li>
                                                <li role="separator" class="divider"></li>
                                                <li><a href="#">Envoyer à tous</a></li>
                                            </ul>
                                        </div>
                                    </td>
                                    <td align="center">
                                        <span class="badge bg-red">{{ notification.sent|length }}</span>
                                    </td>
                                    <td>
                                        {{ notification.event.startTime|date('H:i A') }} - {{ notification.event.startTime|localizeddate('full', 'none', app.request.locale) }}
                                    </td>
                                    <td>
                                        {% if notification.last %}
                                            {{ notification.last.eventToReplace.client.fullNameEmailPhoneToString }}
                                        {% endif %}
                                    </td>
                                </tr>
                            {% endfor %}
                        </tbody></table>
                    </div>
                {% endif %}
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
        </div>

        <div class="col-md-8">
            <div class="box box-solid">
                <div class="box-header with-border">
                    <h3 class="box-title">Votre horaire</h3>
                </div>
                <div class="box-body no-padding">
                    {% include 'ADesignsCalendarBundle::calendar.html.twig' %}
                </div>
            </div>
        </div>

        <div class="col-md-4 event_wrapper">
            <div class="box box-solid">
                <div class="box-header with-border">
                    <h3 class="box-title">Nouveau rendez-vous</h3>
                </div><!-- /.box-header -->
                <!-- form start -->
                {{ form_start(form_event, {'attr': {'id': 'event_new'}, 'action': path('admin_event_new')}) }}
                <div class="box-body">
                    {{ form_widget(form_event) }}
                    <p class="help-block">Sélectionner une case disponible</p>
                </div><!-- /.box-body -->
                <div class="box-footer">
                    <button type="submit" class="btn btn-success" data-loading-text="Enregistrement en cours...">{{ 'admin.event.new.submit'|trans({}, 'messages') }}</button>
                </div>
                {{ form_end(form_event) }}
            </div>
        </div>

        <div class="col-md-4 hide">
            <p class="text-center">
                <strong>Goal Completion</strong>
            </p>

            <div class="progress-group">
                <span class="progress-text">Add Products to Cart</span>
                <span class="progress-number"><b>160</b>/200</span>

                <div class="progress sm">
                    <div class="progress-bar progress-bar-aqua" style="width: 80%"></div>
                </div>
            </div>
            <!-- /.progress-group -->
            <div class="progress-group">
                <span class="progress-text">Complete Purchase</span>
                <span class="progress-number"><b>310</b>/400</span>

                <div class="progress sm">
                    <div class="progress-bar progress-bar-red" style="width: 80%"></div>
                </div>
            </div>
            <!-- /.progress-group -->
            <div class="progress-group">
                <span class="progress-text">Visit Premium Page</span>
                <span class="progress-number"><b>480</b>/800</span>

                <div class="progress sm">
                    <div class="progress-bar progress-bar-green" style="width: 80%"></div>
                </div>
            </div>
            <!-- /.progress-group -->
            <div class="progress-group">
                <span class="progress-text">Send Inquiries</span>
                <span class="progress-number"><b>250</b>/500</span>

                <div class="progress sm">
                    <div class="progress-bar progress-bar-yellow" style="width: 80%"></div>
                </div>
            </div>
            <!-- /.progress-group -->
        </div>

    </div>
{% endblock %}

{% block body_javascript %}
    {{ parent() }}
    {# <script type="text/javascript" src="{{ asset('bundles/adesignscalendar/js/calendar-settings-admin.js') }}"></script> #}

    <script type="text/javascript" src="{{ asset('js/fullCalendarScheduler.js') }}"></script>

    <script>
        var currentEmploye, currentClient;

        $( document ).ready(function() {

            // Submit form #event_new
            $('#admin_appointment_startTime').prop("readonly", true);
            $(document).on("submit", "#event_new", function (e) {
                e.preventDefault();
                $("#event_new").find('.has-error').removeClass('has-error');

                var submitButton = $(this).find(':submit').button('loading');
                var formSerialize = $(this).serialize();
                $.post($(this).attr('action'), formSerialize, function(response){

                    if(response.result.success) {
                        location.reload();
                    } else {
                        submitButton.button('reset');
                        $.each(response.result.data, function(e){
                            $("#event_new").find("input[name*='"+ e +"']").closest('.form-group').addClass('has-error');
                        });
                    }
                    //your callback here
                },'JSON');
            });
            $(document).on("submit", "#event_edit", function (e) {
                e.preventDefault();
                $("#event_edit").find('.has-error').removeClass('has-error');

                var submitButton = $(this).find(':submit').button('loading');
                var formSerialize = $(this).serialize();
                $.post($(this).attr('action'), formSerialize, function(response){

                    if(response.result.success) {
                        location.reload();
                    } else {
                        submitButton.button('reset');
                        $.each(response.result.data, function(e){
                            $("#event_edit").find("input[name*='"+ e +"']").closest('.form-group').addClass('has-error');
                        });
                    }
                    //your callback here
                },'JSON');
            });

            $(document).on('change', "[name*='employe']", function() {
                // Show loading
                $("#main").LoadingOverlay("show");

                currentEmploye = $(this).val();
                $("[name*='startTime']").val('');

                $('#admin_appointment_startTime').closest('form').find("input[type=text], textarea").val("");
                $('#admin_appointment_startTime').closest('form').find("input[type=checkbox]").prop('checked', false);

                // Reload event
                $.when( $('#calendar-holder').fullCalendar( 'refetchEvents' )).then(function(){
                    $("#main").LoadingOverlay("hide", true);
                })
            });

            $(document).on('change', "[name*='client']", function() {
                currentClient = $(this).val();
            });

            // Admin Event Calendar
            var createEventFormHtml;

            $('#calendar-holder').fullCalendar({
                locale: 'fr',
                //hiddenDays: [0, 6],
                height: "auto",
                allDaySlot: false,
                header: {
                    left: 'prev, next',
                    center: 'title',
                    right: 'month, agendaWeek, agendaDay'
                },
                slotMinutes: 15,
                minTime: "08:00:00",
                maxTime: "20:00:00",
                slotLabelFormat:"HH:mm a",
                timeFormat: 'HH:mm',
                defaultView: 'agendaWeek',
                selectable: true,
                eventSources: [
                    {
                        events: function(start, end, timezone, callback) {

                            // Show loading
                            $("#main").LoadingOverlay("show");

                            $.ajax({
                                url: Routing.generate('fullcalendar_loader'),
                                type: 'POST',
                                dataType: 'JSON',
                                data: {
                                    // our hypothetical feed requires UNIX timestamps
                                    start: start.unix(),
                                    end: end.unix(),
                                    employe: $( "[name*='employe']" ).val() ? $( "[name*='employe']" ).val() : 'all',
                                    isEmploye: true
                                },
                                success: function(data) {

                                    var events = [];
                                    $.each(data, function(index) {
                                        console.log( data[index].start);
                                        events.push({
                                            allDay: false,
                                            backgroundColor: data[index].backgroundColor,
                                            borderColor: data[index].borderColor,
                                            className: data[index].className,
                                            start: data[index].start,
                                            end: data[index].end,
                                            textColor: data[index].textColor,
                                            title: data[index].title,
                                            rendering: data[index].rendering,
                                            qTip: '<span>Hoola!!!</span>'
                                        });
                                    });

                                    $("#main").LoadingOverlay("hide", true);

                                    callback(events);
                                }
                            });
                        }
                    }
                ],
                eventClick: function(calEvent, jsEvent, view) {

                    if (!createEventFormHtml) {
                        $('.event_wrapper').find('select[data-select="true"]').select2('destroy');
                        createEventFormHtml = $('.event_wrapper').clone();
                    }

                    $('.myEvent').each(function() {
                        $(this).removeClass('myEvent');
                    });

                    // prepare new event form
                    if (!$(this).hasClass('unavailable')) {

                        $( ".event_wrapper" ).html( createEventFormHtml.html() );

                        if(currentEmploye) {
                            $("[name*='employe']").val(currentEmploye);
                        }
                        if(currentClient) {
                            $("[name*='client']").val(currentClient);
                        }

                        // Update Starttime in the form
                        starttime = moment(calEvent.start).format('YYYY-MM-DD HH:mm');

                        $('#admin_appointment_startTime').closest('form').find("input[type=text], textarea").val("");
                        $('#admin_appointment_startTime').closest('form').find("input[type=checkbox]").prop('checked', false);
                        $('#admin_appointment_startTime').val(starttime);

                        $(this).addClass('myEvent');
                    } else {

                        $("#main").LoadingOverlay("show");

                        var myEvent = $(this).addClass('myEvent');

                        var event_id = calEvent.className[0].split('_')[1];

                        $.post( Routing.generate('admin_event_edit', { 'entity': 'Event', 'id': event_id }), function( data ) {

                            $( ".event_wrapper" ).html( data );
                            $('#admin_appointment_startTime').prop("readonly", true);

                            $("#main").LoadingOverlay("hide", true);
                            myEvent.addClass('myEvent');

                        });
                    }

                    // Select2
                    $('select[data-select="true"]').select2();
                },
            });

        });

        (function() {
            var $ = function(id){return document.getElementById(id)};

            var canvas = this.__canvas = new fabric.Canvas('c', {
                isDrawingMode: true
            });

            fabric.Object.prototype.transparentCorners = false;

            var drawingModeEl = $('drawing-mode'),
                drawingOptionsEl = $('drawing-mode-options'),
                drawingColorEl = $('drawing-color'),
                drawingShadowColorEl = $('drawing-shadow-color'),
                drawingLineWidthEl = $('drawing-line-width'),
                drawingShadowWidth = $('drawing-shadow-width'),
                drawingShadowOffset = $('drawing-shadow-offset'),
                clearEl = $('clear-canvas');

            clearEl.onclick = function() { canvas.clear() };

            drawingModeEl.onclick = function() {
                canvas.isDrawingMode = !canvas.isDrawingMode;
                if (canvas.isDrawingMode) {
                    drawingModeEl.innerHTML = 'Cancel drawing mode';
                    drawingOptionsEl.style.display = '';
                }
                else {
                    drawingModeEl.innerHTML = 'Enter drawing mode';
                    drawingOptionsEl.style.display = 'none';
                }
            };

            if (fabric.PatternBrush) {
                var vLinePatternBrush = new fabric.PatternBrush(canvas);
                vLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(0, 5);
                    ctx.lineTo(10, 5);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var hLinePatternBrush = new fabric.PatternBrush(canvas);
                hLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(5, 0);
                    ctx.lineTo(5, 10);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var squarePatternBrush = new fabric.PatternBrush(canvas);
                squarePatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 2;

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = squareWidth + squareDistance;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.fillStyle = this.color;
                    ctx.fillRect(0, 0, squareWidth, squareWidth);

                    return patternCanvas;
                };

                var diamondPatternBrush = new fabric.PatternBrush(canvas);
                diamondPatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 5;
                    var patternCanvas = fabric.document.createElement('canvas');
                    var rect = new fabric.Rect({
                        width: squareWidth,
                        height: squareWidth,
                        angle: 45,
                        fill: this.color
                    });

                    var canvasWidth = rect.getBoundingRect().width;

                    patternCanvas.width = patternCanvas.height = canvasWidth + squareDistance;
                    rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });

                    var ctx = patternCanvas.getContext('2d');
                    rect.render(ctx);

                    return patternCanvas;
                };

                var img = new Image();
                img.src = '../assets/honey_im_subtle.png';

                var texturePatternBrush = new fabric.PatternBrush(canvas);
                texturePatternBrush.source = img;
            }

            $('drawing-mode-selector').onchange = function() {

                if (this.value === 'hline') {
                    canvas.freeDrawingBrush = vLinePatternBrush;
                }
                else if (this.value === 'vline') {
                    canvas.freeDrawingBrush = hLinePatternBrush;
                }
                else if (this.value === 'square') {
                    canvas.freeDrawingBrush = squarePatternBrush;
                }
                else if (this.value === 'diamond') {
                    canvas.freeDrawingBrush = diamondPatternBrush;
                }
                else if (this.value === 'texture') {
                    canvas.freeDrawingBrush = texturePatternBrush;
                }
                else {
                    canvas.freeDrawingBrush = new fabric[this.value + 'Brush'](canvas);
                }

                if (canvas.freeDrawingBrush) {
                    canvas.freeDrawingBrush.color = drawingColorEl.value;
                    canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                    canvas.freeDrawingBrush.shadow = new fabric.Shadow({
                        blur: parseInt(drawingShadowWidth.value, 10) || 0,
                        offsetX: 0,
                        offsetY: 0,
                        affectStroke: true,
                        color: drawingShadowColorEl.value,
                    });
                }
            };

            drawingColorEl.onchange = function() {
                canvas.freeDrawingBrush.color = this.value;
            };
            drawingShadowColorEl.onchange = function() {
                canvas.freeDrawingBrush.shadow.color = this.value;
            };
            drawingLineWidthEl.onchange = function() {
                canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowWidth.onchange = function() {
                canvas.freeDrawingBrush.shadow.blur = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowOffset.onchange = function() {
                canvas.freeDrawingBrush.shadow.offsetX = parseInt(this.value, 10) || 0;
                canvas.freeDrawingBrush.shadow.offsetY = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };

            if (canvas.freeDrawingBrush) {
                canvas.freeDrawingBrush.color = drawingColorEl.value;
                canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                canvas.freeDrawingBrush.shadow = new fabric.Shadow({
                    blur: parseInt(drawingShadowWidth.value, 10) || 0,
                    offsetX: 0,
                    offsetY: 0,
                    affectStroke: true,
                    color: drawingShadowColorEl.value,
                });
            }
        })();

    </script>

{% endblock %}