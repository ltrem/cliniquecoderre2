{% set event = form.vars.data %}

{% extends '@EasyAdmin/default/edit.html.twig' %}

    {% block entity_form %}

        <div class="nav-tabs-custom">
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist" style="margin-bottom: 15px;">
                <li role="presentation" class="active"><a href="#appointment" aria-controls="events" role="tab" data-toggle="tab">Rendez-vous</a></li>
                <li role="presentation"><a href="#notes" aria-controls="events" role="tab" data-toggle="tab">Notes</a></li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content">

                {# Event #}
                <div role="tabpanel" class="tab-pane active" id="appointment">

                    <div class="row">
                        <div class="col-sm-8">
                            {{ form(form) }}
                        </div>
                        <div class="col-sm-4">
                            <div class="field-group">
                                <div class="box box-default">
                                    <div class="box-header with-border">
                                        <h3 class="box-title">
                                            Reçus d'assurance
                                        </h3>
                                    </div>

                                    <div class="box-body">
                                        {% if event.receipts|length %}
                                            <ul>
                                                {% for receipt in event.receipts %}
                                                    <li>
                                                        <a data-toggle="modal" href="{{ path('admin_receipt_show', { 'id': receipt.id }) }}" data-target="#myModal" class="btn btn-xs btn-info">{{ receipt.receiptDate|date('Y-m-d') }} - {{ receipt.amount }} $</a>
                                                        {# PRINT
                                                        <a target="_blank" href="{{ asset(vich_uploader_asset(receipt, 'imageFile')) }}">{{ receipt.receiptDate|date('Y-m-d') }} - {{ receipt.amount }} $</a>
                                                        #}
                                                    </li>
                                                {% endfor %}
                                            </ul>
                                        {% else %}
                                            <a data-toggle="modal" href="{{ path('admin_receipt_new', { 'id': event.id }) }}" data-target="#myModal" class="btn btn-xs btn-success">Créer un reçus d'assurance</a>
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {# Notes #}
                <div role="tabpanel" class="tab-pane" id="notes">

                    <div class="row">
                        <div class="col-sm-12">

                            <div class="row">
                                <div class="col-md-6">

                                    <div class="row">
                                        <div class="col-xs-8 col-xs-offset-2">
                                            <div id="canvas-editor"></div>
                                        </div>
                                    </div>


                                    <canvas id='c'  width="500" height="500" style="width: 100%; height:auto"></canvas>
                                    {% if event.eventNotes|length %}
                                        {% if event.eventNotes|last %}
                                            <input id="eventNoteImg" type="hidden" value="{{ vich_uploader_asset(event.eventNotes|last, 'imageFile') }}" />
                                        {% endif %}
                                    {% endif %}

                                </div>
                                <div class="col-md-6">
                                    <input type="file" id="imgLoader">
                                    <button id="drawing-mode" class="btn btn-info">Cancel drawing mode</button><br>
                                    <button id="clear-canvas" class="btn btn-info">Clear</button><br>
                                    <button id="save-image" class="btn btn-info">Save image</button><br>

                                    <div id="drawing-mode-options">
                                        <label for="drawing-mode-selector">Mode:</label>
                                        <select id="drawing-mode-selector">
                                            <option>Pencil</option>
                                            <option>Circle</option>
                                            <option>Spray</option>
                                            <option>Pattern</option>

                                            <option>hline</option>
                                            <option>vline</option>
                                            <option>square</option>
                                            <option>diamond</option>
                                            <option>texture</option>
                                        </select><br>

                                        <label for="drawing-line-width">Line width:</label>
                                        <span class="info">30</span><input type="range" value="30" min="0" max="150" id="drawing-line-width"><br>

                                        <label for="drawing-color">Line color:</label>
                                        <input type="color" value="#005E7A" id="drawing-color"><br>

                                        <label for="drawing-shadow-color">Shadow color:</label>
                                        <input type="color" value="#005E7A" id="drawing-shadow-color"><br>

                                        <label for="drawing-shadow-width">Shadow width:</label>
                                        <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>

                                        <label for="drawing-shadow-offset">Shadow offset:</label>
                                        <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-offset"><br>
                                    </div>
                                </div>
                            </div>


                        </div>
                    </div>

                </div>

            </div>

        </div>

    {% endblock entity_form %}


{% block body_javascript %}
    {{ parent() }}

    <script>

        $(".event_datetimepicker").datetimepicker({
            bootcssVer: 3,
            format: 'yyyy-mm-dd hh:ii',
            autoclose: true,
            stepping: 60,
            minView: 'day',
            todayHighlight: true,
            language: 'fr',
            todayBtn: true
            {#pickerPosition: "bottom-left",#}
        });

        /*
        // Canvas
        (function() {
            var $ = function(id){return document.getElementById(id)};

            var canvas = this.__canvas = new fabric.Canvas('c', {
                hoverCursor: 'pointer',
                selection: false
            });

            canvas.on({
                'object:moving': function(e) {
                    e.target.opacity = 0.5;
                },
                'object:modified': function(e) {
                    e.target.opacity = 1;
                }
            });

            fabric.Object.prototype.transparentCorners = false;

            var clearEl = $('clear-canvas'),
                eventNoteImg = $('eventNoteImg');

            clearEl.onclick = function() { canvas.clear() };

            if (eventNoteImg) {
                fabric.Image.fromURL(eventNoteImg.value, function(myImg) {
                    //var img1 = myImg.set({ left: 0, top: 0 ,width:150,height:150});
                    canvas.add(myImg);
                });
            }

            document.getElementById('imgLoader').onchange = function handleImage(e) {
                var reader = new FileReader();
                reader.onload = function (event) { console.log('fdsf');
                    var imgObj = new Image();
                    imgObj.src = event.target.result;
                    imgObj.onload = function () {
                        // start fabricJS stuff

                        var img = new fabric.Image(imgObj);
                        img.set({
                            left: fabric.util.getRandomInt(0, 600),
                            top: fabric.util.getRandomInt(0, 500),
                            angle: fabric.util.getRandomInt(0, 90)
                        });

                        img.perPixelTargetFind = true;
                        img.targetFindTolerance = 4;
                        img.hasControls = img.hasBorders = false;

                        img.scale(fabric.util.getRandomInt(50, 100) / 100);

                        canvas.add(img);
                        // end fabricJS stuff
                    }

                }
                reader.readAsDataURL(e.target.files[0]);
            }

        })();
         */

        $(document).ready(function () {
            var drawerPlugins = [
                // Drawing tools
                'Pencil',
                'Eraser',
                'Text',
                'Line',
                'ArrowOneSide',
                'ArrowTwoSide',
                'Triangle',
                'Rectangle',
                'Circle',
                'Image',
                'BackgroundImage',
                'Polygon',
                'ImageCrop',

                // Drawing options
                //'ColorHtml5',
                'Color',
                'ShapeBorder',
                'BrushSize',
                'OpacityOption',

                'LineWidth',
                'StrokeWidth',

                'Resize',
                'ShapeContextMenu',
                'CloseButton',
                'OvercanvasPopup',
                'OpenPopupButton',
                'MinimizeButton',
                'ToggleVisibilityButton',
                'MovableFloatingMode',
                'FullscreenModeButton',
                'Zoom',

                'TextLineHeight',
                'TextAlign',

                'TextFontFamily',
                'TextFontSize',
                'TextFontWeight',
                'TextFontStyle',
                'TextDecoration',
                'TextColor',
                'TextBackgroundColor'
            ];

            // drawer is created as global property solely for debug purposes.
            // doing  in production is considered as bad practice
            window.drawer = new DrawerJs.Drawer(null, {
                plugins: drawerPlugins,
                pluginsConfig: {
                    Image: {
                        scaleDownLargeImage: true,
                        maxImageSizeKb: 10240, //1MB
                        cropIsActive: true
                    },
                    BackgroundImage: {
                        scaleDownLargeImage: true,
                        maxImageSizeKb: 10240, //1MB
                        //fixedBackgroundUrl: '/examples/redactor/images/vanGogh.jpg',
                        imagePosition: 'center',  // one of  'center', 'stretch', 'top-left', 'top-right', 'bottom-left', 'bottom-right'
                        acceptedMIMETypes: ['image/jpeg', 'image/png', 'image/gif'] ,
                        dynamicRepositionImage: true,
                        dynamicRepositionImageThrottle: 100,
                        cropIsActive: false
                    },
                    Text: {
                        editIconMode : false,
                        editIconSize : 'large',
                        defaultValues : {
                            fontSize: 72,
                            lineHeight: 2,
                            textFontWeight: 'bold'
                        },
                        predefined: {
                            fontSize: [8, 12, 14, 16, 32, 40, 72],
                            lineHeight: [1, 2, 3, 4, 6]
                        }
                    },
                    Zoom: {
                        enabled: true,
                        showZoomTooltip: true,
                        useWheelEvents: true,
                        zoomStep: 1.05,
                        defaultZoom: 1,
                        maxZoom: 32,
                        minZoom: 1,
                        smoothnessOfWheel: 0,
                        //Moving:
                        enableMove: true,
                        enableWhenNoActiveTool: true,
                        enableButton: true
                    }
                },
                toolbars: {
                    drawingTools: {
                        position: 'top',
                        positionType: 'outside',
                        customAnchorSelector: '#custom-toolbar-here',
                        compactType: 'scrollable',
                        hidden: false,
                        toggleVisibilityButton: false,
                        fullscreenMode: {
                            position: 'top',
                            hidden: false,
                            toggleVisibilityButton: false
                        }
                    },
                    toolOptions: {
                        position: 'bottom',
                        positionType: 'inside',
                        compactType: 'popup',
                        hidden: false,
                        toggleVisibilityButton: false,
                        fullscreenMode: {
                            position: 'bottom',
                            compactType: 'popup',
                            hidden: false,
                            toggleVisibilityButton: false
                        }
                    },
                    settings : {
                        position : 'right',
                        positionType: 'inside',
                        compactType : 'scrollable',
                        hidden: false,
                        toggleVisibilityButton: false,
                        fullscreenMode: {
                            position : 'right',
                            hidden: false,
                            toggleVisibilityButton: false
                        }
                    }
                },
                defaultImageUrl: $('#eventNoteImg').attr('value'),
                defaultActivePlugin : { name : 'Pencil', mode : 'lastUsed'},
                debug: true,
                activeColor: '#a1be13',
                transparentBackground: true,
                align: 'floating',  //one of 'left', 'right', 'center', 'inline', 'floating'
                lineAngleTooltip: { enabled: true, color: 'blue',  fontSize: 15}
            }, 600, 400);

            $('#canvas-editor').append(window.drawer.getHtml());
            window.drawer.onInsert();


        });

        $( document ).ready(function() {

            // Reload calendar depending on tab opened
            $('a[data-toggle="tab"][aria-controls="events"]').on('shown.bs.tab', function (e) {
                $('#calendar-holder').fullCalendar('refetchEvents');
                $('#calendar-holder').fullCalendar('render');
            });
            $('a[data-toggle="tab"][aria-controls="configurations"]').on('shown.bs.tab', function (e) {
                $('#calendar-schedule').fullCalendarScheduler('render');
            });
            $('#myTab a:first').tab('show');

        });

        $(document).on("click", "#save-image", function (e) {
            e.preventDefault();

            $.post(Routing.generate('admin_eventNote_new', {'id': {{ event.id}} }), { canvasBase64: window.drawer.api.getCanvasAsImage() }, function(response){
                if(response.success) {
                    alert(response.message);
                }
            },'JSON');
        });
    </script>
{% endblock %}